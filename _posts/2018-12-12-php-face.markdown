---
layout: post
title: Conference on Javascript
date: 2018-12-12 16:30:00 +10000
description: php中级开发面试题总结
img: js-1.png # Add image post (optional)
tags: [PHP,面试 ] # add tag
---
```php
前引
2018年最新PHP面试题大全（干货）,面试之前多看看公司的资料,可以看出面试的公司主要做什么,电商,数据库,php函数,sql的优化,接口,session和cookie等经常会问到,都是必问之题,这其中有一部分题目摘抄自网络,回答也不错
```

## 正文

1.请自我介绍一下?

答:我叫 xxx,来自北京,20xx 年毕业于 xx 大学计算机 xx 系,毕业后在武汉从事了 x 年的 php 开发工作,公司是一个外包公司,主要做微信开发,公众号推广,商城,论坛的开发
2.你在公司负责那些项目?

答:由于我们公司是一个外包公司,不可能只做一个项目,公司的项目都是交叉进行的,论坛,微信,商城我都做过?
3.你为什么来深圳?

答:因为我哥在这边,父母也希望兄弟间有个照应,而且深圳是一线城市,技术也比广西前沿一些
4.武汉使用什么前端框架和后端框架?

答:根据自己的区域回答
5.你做过那些模块?

答:登陆注册,商品管理,购物车模块,订单管理
6.你们公司是使用什么框架?

答:我们公司采用的是 TP 框架,运用的 mysql+apache+php 进行开发,因为 TP 框架是一个免费开源的,轻量级的 php 开发框架,而且是我们中国人自己开发的,也是国内用的比较多的,各种资料也比较齐全
7.mvc 是什么?相互间有什么关系?

答:mvc 是一种开发模式,主要分为三部分:m(model),也就是模型,负责数据的操作;v(view),也就是视图,负责前后台的显示;c(controller),也就是控制器,负责业务逻辑。客户端请求项目的控制器,如果执行过程中需要用到数据,控制器就会到模型中获取数据,再将获取到的数据通过视图显示出来
8.oop 是什么?

答:oop 是面向对象编程,面向对象编程是一种计算机编程架构,OOP 的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。

OOP 具有三大特点

1、封装性：也称为信息隐藏，就是将一个类的使用和实现分开，只保留部分接口和方法与外部联系，或者说只公开了一些供开发人员使用的方法。于是开发人员只 需要关注这个类如何使用，而不用去关心其具体的实现过程，这样就能实现 MVC 分工合作，也能有效避免程序间相互依赖，实现代码模块间松藕合。

 2、继承性：就是子类自动继承其父级类中的属性和方法，并可以添加新的属性和方法或者对部分属性和方法进行重写。继承增加了代码的可重用性。PHP 只支持单继承，也就是说一个子类只能有一个父类。

 3、多态性：子类继承了来自父级类中的属性和方法，并对其中部分方法进行重写。于是多个子类中虽然都具有同一个方法，但是这些子类实例化的对象调用这些相同的方法后却可以获得完全不同的结果，这种技术就是多态性。多态性增强了软件的灵活性。

 1、易维护
 采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的。
 2、质量高
 在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量。
 3、效率高
 在软件开发时，根据设计的需要对现实世界的事物进行抽象，产生类。使用这样的方法解决问题，接近于日常生活和自然的思考方式，势必提高软件开发的效率和质量。
 4、易扩展
 由于继承、封装、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低。
9.smarty 是什么,有什么作用?

答:回答一:smarty 是用 php 写出来的模板引擎,也是目前业界最著名的 php 模板引擎之一
    它分离了逻辑代码和外在的显示,提供了一种易于管理和使用的方法,用来将混杂的 php 逻辑代码与 html 代码进行分离

   回答二:smarty 是 php 中最著名的引擎框架之一,我们公司使用的是 TP 框架,已经封装好了 smarty 模板,所以没有单独使用过

   回答三: smarty 是个模板引擎，最显著的地方就是有可以把模板缓存起来。一般模板来说，都是做一个静态页面，然后在里面把一些动态的部分用一切分隔符切开，然后在 PHP 里打开这个模板文件，把分隔符里面的值替换掉，然后输出来，你可以看下 PHPLib 里面的 template 部分。

    而 smarty 设定了缓存参数以后，第一次运行时候会把模板打开，在 php 替换里面值的时候把读取的 html 和 php 部分重新生成一个临时的 php 文件，这样就省去了每次打开都重新读取 html 了。如果修改了模板，只要重新刷下就行了。
10.TP 框架有哪些优点?

答:TP 框架是我们中国人自己开发的框架,各种资料比较齐全,国内用的比较多,比较简单和方便,而且是免费开源的
11.TP 的特性有哪些?

答: 1.多表查询非常方便,在 model 中几句代码就可以完成对多表的关联操作
    2.融合了 smarty 模板,使前后台分离
    3.支持多种缓存技术,尤其对 memcache 技术支持非常好
    4.命名规范,模型,视图,控制器严格遵循命名规则,通过命名一一对应
    5.支持多种 url 模式
    6.内置 ajax 返回方法,包括 xml,json,html 等
    7.支持应用扩展,类库扩展,驱动扩展等
12.TP 框架中的大字母函数?

答: U:对 url 的组装
    A:内部实例化控制器
    S:缓存处理
    R:调用某个控制器的操作方法
    D:实例化自定义模型类
    M:实例化基础模型类
    I:获取参数
    L:设置或者获取当前语言
    C:设置或获取,保存配置
13.请介绍一下 laravel 框架?

答: laravel 框架的设计思想比较先进,非常适合应用各种开发模式,作为一个框架,它为你准备好了一切,composer 是 php 的未来,没有 composer,php 肯定要走向没落
    laravel 框架最大的特点和优秀之处就是集合了 php 比较新的特点,以及各种各样的设计模式,Ioc 模式,依赖注入等
14.laravel 有那些特点?

答:回答一: 1.强大的 rest router:用简单的回调函数就可以调用,快速绑定 controller 和 router
           2.artisan:命令行工具,很多手动的工作都自动化
           3.可继承的模板,简化 view 的开发和管理
           4.blade 模板:渲染速度更快
           5.ORM 操作数据库
           6.migration:管理数据库和版本控制
           7.测试功能也很强大
           8.composer 也是亮点

   回答二: laravel 框架引入了门面,依赖注入,Ioc 模式,以及各种各样的设计模式等
15.请简述一下数据库的优化?

答:数据库的优化可以从四个方面来优化:
   1.从结构层: web 服务器采用负载均衡服务器,mysql 服务器采用主从复制,读写分离
   2.从储存层: 采用合适的存储引擎,采用三范式
   3.从设计层: 采用分区分表,索引,表字段合适的字段属性,适当采用逆范式,开启 mysql 缓存
   4.sql 语句层:结果一样的情况下,采用效率高,速度快节省资源的 sql 语句执行
16.如何解决异常处理?

答: 抛出异常:使用 try...catch，异常的代码放在 try 代码块内，如果没有触发异常，则代码继续执行，如果异常被触发，就会抛出一个异常。Catch 代码块捕获异常，并创建一个包含异常信息的对象。$e->getMessage()，输出异常的错误信息。

    解决异常:使用 set_error_handler 函数获取异常(也可以使用 try()和 catch()函数),然后使用 set_exception_handler()函数设置默认的异常处理程序,register_shutdown_function()函数来执行,执行机制是,php 要把调入的函数调入到内存,当页面所有的 php 语句都执行完成时,再调用此函数
17.前端

   答:我在工作中处理前端的功能，一般就是用 ajax 向后台请求数据，然后返回数据在前台页面中显示出来。我从来没有独立的完整的将 html 和 css 样式都一个人完成，如果公司实在有这样的需求的话，我可能会找一些前台的模板或者说是前端的框架，比如说 h—ui 等等
18.权限管理(RBAC)的实现?

答: 1.首先创建一张用户表:id name auto(保存格式为:控制器-方法)

    2.然后在后台中创建一个基类控制器,控制器里封装一个构造方法,当用户登陆成功后,使用 TP 框架中封装好的 session 函数获取保存在服务器中的 session id,然后实例化模型,通过用户 id 获取保存在数据表中的 auth 数据,使用 explode 函数分割获取到的数据,并使用一个数组保存起来,然后使用 TP 框架中封装好的常量获取当前控制器和方法,然后把他们组装成字符串,使用 in_array 函数进行判断该数组中是否含有当前获取到的控制器和方法,如果没有,就提示该用户没有权限,如果有就进行下一步操作
19.支付功能的实现?

答:
20.怎么保证促销商品不会超卖

   答:这个问题是我们当时开发时遇到的一个难点，超卖的原因主要是下的订单的数目和我们要促销的商品的数目不一致导致的，每次总是订单的数比我们的促销商品的数目要多，当时我们的小组讨论了好久，给出了好几个方案来实现：

   第一种方案是：①在每次下订单前我们判断促销商品的数量够不够，不够不允许下订单，更改库存量时加上一个条件，只更改商品库存大于 0 的商品的库存，当时我们使用 ab 进行压力测试，当并发超过 500，访问量超过 2000 时，还是会出现超卖现象。所以被我们否定了。

   第二种方案是：②使用 mysql 的事务加排他锁来解决，首先我们选择数据库的存储引擎为 innoDB，使用的是排他锁实现的，刚开始的时候我们测试了下共享锁，发现还是会出现超卖的现象。有个问题是，当我们进行高并发测试时，对数据库的性能影响很大，导致数据库的压力很大，最终也被我们否定了。

   第三种方案是：③使用文件锁实现。当用户抢到一件促销商品后先触发文件锁，防止其他用户进入，该用户抢到促销品后再解开文件锁，放其他用户进行操作。这样可以解决超卖的问题，但是会导致文件得 I/O 开销很大。

   最后我们使用了 redis 的队列来实现。将要促销的商品数量以队列的方式存入 redis 中，每当用户抢到一件促销商品则从队列中删除一个数据，确保商品不会超卖。这个操作起来很方便，而且效率极高，最终我们采取这种方式来实现
21.商城秒杀的实现

   答:抢购、秒杀是如今很常见的一个应用场景，主要需要解决的问题有两个：
   1 高并发对数据库产生的压力
   2 竞争状态下如何解决库存的正确减少（”超卖”问题）

    对于第一个问题，已经很容易想到用缓存来处理抢购，避免直接操作数据库，例如使用 Redis。
    第二个问题，我们可以使用 redis 队列来完成，把要秒杀的商品放入到队列中，因为 pop 操作是原子的，即使有很多用户同时到达，也是依次执行，文件锁和事务在高并发下性能下降很快，当然还要考虑其他方面的东西，比如抢购页面做成静态的，通过 ajax 调用接口，其中也可能会出现一个用户抢多次的情况，这时候需要再加上一个排队队列和抢购结果队列及库存队列。高并发情况下，将用户进入排队队列，用一个线程循环处理从排队队列取出一个用户，判断用户是否已在抢购结果队列，如果在，则已抢购，否则未抢购，库存减 1，写数据库，将用户入结果队列。
22.购物车的原理

   答:购物车相当于现实中超市的购物车，不同的是一个是实体车，一个是虚拟车而已。用户可以在购物网站的不同页面之间跳转，以选购自己喜爱的商品，点击购买时，该商品就自动保存到你的购物车中，重复选购后，最后将选中的所有商品放在购物车中统一到付款台结账，这也是尽量让客户体验到现实生活中购物的感觉。服务器通过追踪每个用户的行动，以保证在结账时每件商品都物有其主。   

   主要涉及以下几点:

    1、把商品添加到购物车，即订购
    2、删除购物车中已定购的商品
    3、修改购物车中某一本图书的订购数量
    4、清空购物车
    5、显示购物车中商品清单及数量、价格

   实现购物车的关键在于服务器识别每一个用户并维持与他们的联系。但是 HTTP 协议是一种“无状态(Stateless)”的协议，因而服务器不能记住是谁在购买商品，当把商品加入购物车时，服务器也不知道购物车里原先有些什么，使得用户在不同页面间跳转时购物车无法“随身携带”，这都给购物车的实现造成了一定的困难。

   目前购物车的实现主要是通过 cookie、session 或结合数据库的方式。下面分析一下它们的机制及作用。
cookie

cookie 是由服务器产生，存储在客户端的一段信息。它定义了一种 Web 服务器在客户端存储和返回信息的机制，cookie 文件它包含域、路径、生存期、和由服务器设置的变量值等内容。当用户以后访问同一个 Web 服务器时，浏览器会把 cookie 原样发送给服务器。通过让服务器读取原先保存到客户端的信息，网站能够为浏览者提供一系列的方便，例如在线交易过程中标识用户身份、安全要求不高的场合避免用户重复输入名字和密码、门户网站的主页定制、有针对性地投放广告等等。利用 cookie 的特性，大大扩展了 WEB 应用程序的功能，不仅可以建立服务器与客户机的联系，因为 cookie 可以由服务器定制，因此还可以将购物信息生成 cookie 值存放在客户端，从而实现购物车的功能。用基于 cookie 的方式实现服务器与浏览器之间的会话或购物车，有以下特点：

1、cookie 存储在客户端，且占用很少的资源，浏览器允许存放 300 个 cookie，每个 cookie 的大小为 4KB，足以满足购物车的要求，同时也减轻了服务器的负荷；
2、cookie 为浏览器所内置，使用方便。即使用户不小心关闭了浏览器窗口，只要在 cookie 定义的有效期内，购物车中的信息也不会丢失；
3、cookie 不是可执行文件，所以不会以任何方式执行，因此也不会带来病毒或攻击用户的系统；
4、基于 cookie 的购物车要求用户浏览器必须支持并设置为启用 cookie，否则购物车则失效；
5、存在着关于 cookie 侵犯访问者隐私权的争论，因此有些用户会禁止本机的 cookie 功能。
session

session 是实现购物车的另一种方法。session 提供了可以保存和跟踪用户的状态信息的功能，使当前用户在 session 中定义的变量和对象能在页面之间共享，但是不能为应用中其他用户所访问，它与 cookie 最重大的区别是，session 将用户在会话期间的私有信息存储在服务器端，提高了安全性。在服务器生成 session 后，客户端会生成一个 sessionid 识别号保存在客户端，以保持和服务器的同步。这个 sessionid 是只读的，如果客户端禁止 cookie 功能，session 会通过在 URL 中附加参数，或隐含在表单中提交等其他方式在页面间传送。因此利用 session 实施对用户的管理则更为安全、有效。

同样，利用 session 也能实现购物车，这种方式的特点是：

1、session 用新的机制保持与客户端的同步，不依赖于客户端设置；
2、与 cookie 相比，session 是存储在服务器端的信息，因此显得更为安全，因此可将身份标示，购物等信息存储在 session 中；
3、session 会占用服务器资源，加大服务器端的负载，尤其当并发用户很多时，会生成大量的 session，影响服务器的性能；
4、因为 session 存储的信息更敏感，而且是以文件形式保存在服务器中，因此仍然存在着安全隐患。
结合数据库的方式

这也是目前较普遍的模式，在这种方式中，数据库承担着存储购物信息的作用，session 或 cookie 则用来跟踪用户。这种方式具有以下特点：

1、数据库与 cookie 分别负责记录数据和维持会话，能发挥各自的优势，使安全性和服务器性能都得到了提高；
2、每一个购物的行为，都要直接建立与数据库的连接，直至对表的操作完成后，连接才释放。当并发用户很多时，会影响数据库的性能，因此，这对数据库的性能提出了更高的要求；
3、使 cookie 维持会话有赖客户端的支持。
各种方式的选择：

虽然 cookie 可用来实现购物车，但必须获得浏览器的支持，再加上它是存储在客户端的信息，极易被获取，所以这也限制了它存储更多，更重要的信息。所以一般 cookie 只用来维持与服务器的会话，例如国内最大的当当网络书店就是用 cookie 保持与客户的联系，但是这种方式最大的缺点是如果客户端不支持 cookie 就会使购物车失效。

Session 能很好地与交易双方保持会话，可以忽视客户端的设置。在购物车技术中得到了广泛的应用。但 session 的文件属性使其仍然留有安全隐患。


结合数据库的方式虽然在一定程度上解决了上述的问题，但从上面的例子可以看出：在这种购物流程中涉及到对数据库表的频繁操作，尤其是用户每选购一次商品，都要与数据库进行连接，当用户很多的时候就加大了服务器与数据库的负荷。
23.redis 消息队列先进先出需要注意什么

答:通常使用一个 list 来实现队列操作，这样有一个小限制，所以的任务统一都是先进先出，如果想优先处理某个任务就不太好处理了，这就需要让队列有优先级的概念，我们就可以优先处理高级别的任务，实现方式有以下几种方式：

    1）单一列表实现：队列正常的操作是 左进右出（lpush,rpop）为了先处理高优先级任务，在遇到高级别任务时，可以直接插队，直接放入队列头部（rpush），这样，从队列头部（右侧）获取任务时，取到的就是高优先级的任务（rpop）

    2）使用两个队列，一个普通队列，一个高级队列，针对任务的级别放入不同的队列，获取任务时也很简单，redis 的 BRPOP 命令可以按顺序从多个队列中取值，BRPOP 会按照给出的 key 顺序查看，并在找到的第一个非空 list 的尾部弹出一个元素，redis> BRPOP list1 list2 0

list1 做为高优先级任务队列
list2 做为普通任务队列

这样就实现了先处理高优先级任务，当没有高优先级任务时，就去获取普通任务

方式 1 最简单，但实际应用比较局限，方式 3 可以实现复杂优先级，但实现比较复杂，不利于维护

方式 2 是推荐用法，实际应用最为合适
24.你负责的模块有哪些难题

答:在我负责的 B2B 电商项目中，当时我负责的是订单模块，由于客户一次选择了多家商户的商品，最终生成了一个订单，这样我们平台在给商户结算时出现了不知道这比费用应该给哪个商户，这时候我们小组经过讨论，需要涉及到订单拆分，也就是说用户点击支付后,如果有多件商品,并且不是同一家店铺那么 就要用到订单的拆分,比如如果有两件商品,并且不是同一店铺 就在原来的订单号下 在生成两个子订单号 并修改订单表中两件商品的订单号。最终实现了商品的分配管理，解决了我们的难题。

我觉得在开发过程中，遇到的难题无非是两个，一个是技术层次的，我认为，只要你有恒心，有热心，没有觉得不了的难题。另一个就是沟通问题，在任何地方任何时候沟通都是最重要的，尤其是我们做开发的，不沟通好，会影响整个项目的进度，我本人是个非常还沟通的人，所以这点上也没多大问题。
25.用户下单是怎么处理的

答:判断用户有没有登录，在没有登录的情况下，不允许下单。登陆后，可进行下单，并生成唯一的订单号，此时订单的状态为未支付。
26.电商的登录是怎么实现的

答:分为普通登录和第三方登录 这边主要说一下第三方登录吧，第三方登陆主要使用的是 author 协议，我就以 QQ 的第三方登陆为例来进行说明：当用户在我们的站点请求 QQ 的第三方登陆时，我们站点会引导用户跳转到 QQ 的登陆授权界面， 当用户输入 QQ 和密码成功登录以后会自动跳回到我们站点设置好的回调页面，并附带一个 code 参数，接着你使用 code 再次去请求 QQ 的授权页面，就可以从中获取到一个 access token（访问令牌），通过这个 access_token，我们可以调用 QQ 提供给我们的接口，比如获取 open_id，可以获取用户的基本信息。获取到之后，我们需要拿用户的授权信息和 open_id 和我们平台的普通用户进行绑定。这样不管是普通用户登陆还是第三方登陆用户，都可以实现登陆。
27.接口安全方面是怎么处理的

答:我们当时是这么做的，使用 HTTP 的 POST 方式,对固定参数+附加参数进行数字签名,使用的是 md5 加密,比如:我想通过标题获取一个信息,在客户端使用 信息标题+日期+双方约定好的一个 key 通过 md5 加密生成一个签名(sign),然后作为参数传递到服务器端,服务器端使用同样的方法进行校验,如何接受过来的 sign 和我们通过算法算的值相同，证明是一个正常的接口请求，我们才会返回相应的接口数据。
28.用的什么技术实现短信发送，在哪调用

答:我主要用的第三方短信接口，在申请接口时进行相应信息的配置，然后在我们站点需要用到短信验证的地方进行调用，我们通常在用户注册时使用到。
29.在工作中遇到什么困难?

答:总体来说：在工作我主要遇到这几个问题比较难处理：

    ①我之前工作的时候发现经常会出现一些临时需求打乱了我的计划，搞得有时候这个任务还没完成，又得去做其他的任务，最后一天下来，大大小小的东西是很多，但是没有完成得非常好的，后面我总结了一下，我会把这些都添加优先级，遇到临时需求，按照优先级重新将已有任务和临时任务进行排版，保证在规定时间内有效率的完成优先级高的任务。

    ②在做项目需求时候，遇到理解能力欠佳的人，沟通时容易被气到，影响自己的情绪，最后反倒还不能到达需要的效果。后面，每次到这种时候，我一般会借助一些纸质的、更加形象的东西，让双方都认同的、都能明白的一种方式来进行沟通，后面减少了很多不必须的麻烦。大家都知道，对于程序员来说，改需求是一件很痛苦的事情，所以前期的沟通工作很重要。

    ③还有一件事时，我以前的领导不太懂技术，所以每次出一个新的需求出来，总是要求我们在很短的时间内完成，完不成我们就会被怀疑能力有问题。当然，每个领导都希望自己的员工能够尽快的完成任务，降低成本，提高效率。这时候我会把我们的需求细化，把其中的重点、难点都列出来，做好时间规划，耐心的跟领导沟通，项目每个点的重要性和时间的花费比例，确保在这个规划的时间点内保质保量的完成任务。慢慢的也得到了领导的认可，其实领导也不是一味的不通情理，只要把东西计划好了，以最小的代价换取最高的价值，每个人都是很容易理解得
30.用户不登录，怎么直接加入购物车的

答:用户在不登录的情况下，可以把要购买商品的信息（如商品的 ID，商品的价格、商品的 sku_id,购买数量等关键数据）存到 COOKIE 里面，当登陆的情况下。把 COOKIE 里面的内容存到数据库，并清除 cookie 中的数据。
31.写过接口吗，怎么定义接口的

答：写过。接口分为两种：一种是数据型接口，一种是应用型接口。

数据型接口：是比抽象类更抽象的某种“结构”——它其实不是类，但是跟类一样的某种语法结构，是一种结构规范，规范我们类要以什么格式进行定义，一般用于团队比较大，分支比较多的情况下使用。

应用型接口： API（application interface） 数据对外访问的一个入口

我主要是参与的 APP 开发中接口的编写，客户端需要什么样的数据，我们就给他们提供相应的数据，数据以 json/xml 的格式返回，并且配以相应的接口文档。
32.sku 减库存

答:SKU = Stock Keeping Unit (库存量单位)   
即库存进出计量的单位，可以是以件，盒，托盘等为单位。SKU 是库存量单位，区分单品。   
在服装、鞋类商品中使用最多最普遍。 例如纺织品中一个 SKU 通常表示：规格、颜色、款式。

在设计表时，不仅仅只有商品表，商品表中有个总库存，我们还需要涉及一张 SKU 表，里面有 SKU 库存和单价字段，用户每购买一件商品，实际上购买的都是 SKU 商品，这样在下订单成功后，应该根据所购买的商品的唯一的 SKU 号来进行相应的 SKU 库存的减少，当然商品的总库存保存在商品主表中，也需要减少总库存中的库存量。
33.库存设置？

答:库存分为商品总库存和 SKU 库存，往往商品总库存的为 SKU 库存的总和。一般在商城的后台对货品设置最高库存及最低库存后，当前库存数量与最高、最低两者比较，超出库存或者低于库存的，则被统计成报表形式反映，便于用户掌握货品库存超、短缺状态及数量。
34.订单、库存两个表 如何保证数据的一致性？

答:在一个电子商务系统中，正常的应该是订单生成成功后，相应的库存进行减少。必须要保证两者的一致性，但有时候因为某些原因，比如程序逻辑问题，并发等问题，导致下单成功而库存没有减少的情况。这种情况我们是不允许发生的，MySQL 中的事务刚好可以解决这一问题，首先得选择数据库的存储引擎为 innoDB,事务规定了只有下订单完成了，并且相应的库存减少了才允许提交事务，否则就事务回滚，确保数据一致性。
35.O2O 用户下单,c 端下单,如何保证 b a 端数据一致?

答:O2O 为线上和线下模式，O2O 模式奉行的是“线上支付+实体店消费”的消费模式，即消费者在网上下单完成支付后，凭消费凭证到实体店消费。O2O 模式是把商家信息和支付程序放在线上进行，而把商品和服务兑现放在线下，也就是说 O2O 模式适用于快递无法送达的有形产品。数据一致性的问题是 O2O 行业中最常见的问题，我们可以类似于数据库的主从复制的思路来解决这个问题。O2O 有个供应商系统，类似于主服务器，在 C 端（从服务器）下单时，数据同步更新到供应商系统端，b、a 实时从供应商系统中拉取数据进行同步，比如利用定时任务，定时拉取数据进行同步。
36.Redis 如何防止高并发

答:其实 redis 是不会存在并发问题的，因为他是单进程的，再多的 command 都是 one by one 执行的。我们使用的时候，可能会出现并发问题，比如 get 和 set 这一对。

redis 为什么会有高并发问题
redis 的出身决定
   Redis 是一种单线程机制的 nosql 数据库，基于 key-value，数据可持久化落盘。由于单线程所以 redis 本身并没有锁的概念，多个客户端连接并不存在竞争关系，但是利用 jedis 等客户端对 redis 进行并发访问时会出现问题。发生连接超时、数据转换错误、阻塞、客户端关闭连接等问题，这些问题均是由于客户端连接混乱造成。
   同时，单线程的天性决定，高并发对同一个键的操作会排队处理，如果并发量很大，可能造成后来的请求超时。
   在远程访问 redis 的时候，因为网络等原因造成高并发访问延迟返回的问题。

解决办法

   在客户端将连接进行池化，同时对客户端读写 Redis 操作采用内部锁 synchronized。
   服务器角度，利用 setnx 变向实现锁机制。
37.秒杀当中的细节你是怎么得出来的

答:通过性能测试及模拟秒杀场景。每个问题都经过反复测试，不断的发现问题，不断的解决。
38.做秒杀用什么数据库，怎么实现的。

答:因为秒杀的一瞬间，并发非常大，如果同时请求数据库，会导致数据库的压力非常大，导致数据库的性能急剧下降，更严重的可能会导致数据库服务器宕机。这时候一般采用内存高速缓存数据库 redis 来实现的,redis 是非关系型数据库，redis 是单线程的，通过 redis 的队列可以完成秒杀过程。
39.支付宝流程怎么实现的

答:首先要有一个支付宝账号，接下来向支付宝申请在线支付业务，签署协议。协议生效后有支付宝一方会给网站方一个合作伙伴 ID,和安全校验码，有了这两样东西就可以按照支付宝接口文档开发支付宝接口了，中间主要涉及到一个安全问题。整个流程是这样的：我们的网站通过 post 传递相应的参数（如订单总金额，订单号）到支付页面，支付页面把一系列的参数经过处理，以 post 的方式提交给支付宝服务器，支付宝服务器进行验证，并对接收的数据进行处理，把处理后的结果返回给我们网站设置的异步和同步回调地址，通过相应的返回参数，来处理相应的业务逻辑，比如返回的参数代表支付成功，更改订单状态。
40.什么是单点登录？

答:单点登录 SSO（Single Sign On）说得简单点就是在一个多系统共存的环境下，用户在一处登录后，就不用在其他系统中登录，也就是用户的一次登录能得到其他所有系统的信任。
41.什么情况下使用缓存

答:当用户第一次访问应用系统的时候，因为还没有登录，会被引导到认证系统中进行登录；根据用户提供的登录信息，认证系统进行身份校验，如果通过校验，应该返回给用户一个认证的凭据－－ticket；用户再访问别的应用的时候，就会将这个 ticket 带上，作为自己认证的凭据，应用系统接受到请求之后会把 ticket 送到认证系统进行校验，检查 ticket 的合法性。如果通过校验，用户就可以在不用再次登录的情况下访问应用系统 2 和应用系统 3 了。

实现主要技术点：

    1、两个站点共用一个数据验证系统
    2、主要通过跨域请求的方式来实现验证及 session 处理。
42.怎么实现第三方登录？

答:第三方登陆主要是基于 author 协议来实现，下面简单说下实现流程:

    1、首先我们需要以开发者的身份向第三方登陆平台申请接入应用，申请成功后，我们会获得一个 appID 和一个 secrectID.
    2、当我们的网站需接入第三方登陆时，会引导用户跳转到第三方的登陆授权页面，此时把之前申请的 appID 和 secrectID 带给登陆授权页面。
    3、用户登陆成功后即得到授权，第三方会返回一个临时的 code 给我们的网站。
    4、我们的网站接受到 code 后，再次向我们的第三方发起请求，并携带接收的 code,从第三方获取 access_token.
    5、第三方处理请求后，会返回一个 access_token 给我们的网站，我们的网站获取到 access_token 后就可以调用第三方提供的接口了，比如获取用户信息等。最后把该用户信息存入到我们站点的数据库，并把信息保存到 session 中，实现用户的第三方登陆。
43.如何处理负载、高并发？(好好看看，经常问到，能回答到主要的东西即可)

答:从低成本、高性能和高扩张性的角度来说有如下处理方案：

1、HTML 静态化
其实大家都知道，效率最高、消耗最小的就是纯静态化的 html 页面，所以我们尽可能使我们的 网站上的页面采用静态页面来实现，这个最简单的方法其实也是最有效的方法。

2、图片服务器分离
把图片单独存储，尽量减少图片等大流量的开销，可以放在一些相关的平台上，如骑牛等

3、数据库集群和库表散列及缓存
数据库的并发连接为 100，一台数据库远远不够，可以从读写分离、主从复制，数据库集群方面来着手。另外尽量减少数据库的访问，可以使用缓存数据库如 memcache、redis。

4、镜像：
尽量减少下载，可以把不同的请求分发到多个镜像端。

5、数据库优化

6、负载均衡：
Apache 的最大并发连接为 1500，只能增加服务器，可以从硬件上着手，如 F5 服务器。当然硬件的成本比较高，我们往往从软件方面着手。

负载均衡 （Load Balancing） 建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展网络设备和服务器的带宽、增加吞吐量、加强网络数据处理能力，同时能够提高网络的灵活性和可用性。目前使用最为广泛的负载均衡软件是 Nginx、LVS、HAProxy。我分别来说下三种的优缺点:
Nginx 的优点是：

 

工作在网络的 7 层之上，可以针对 http 应用做一些分流的策略，比如针对域名、目录结构，它的正则规则比 HAProxy 更为强大和灵活，这也是它目前广泛流行的主要原因之一，Nginx 单凭这点可利用的场合就远多于 LVS 了。
Nginx 对网络稳定性的依赖非常小，理论上能 ping 通就就能进行负载功能，这个也是它的优势之一；相反 LVS 对网络稳定性依赖比较大，这点本人深有体会；
Nginx 安装和配置比较简单，测试起来比较方便，它基本能把错误用日志打印出来。LVS 的配置、测试就要花比较长的时间了，LVS 对网络依赖比较大。
可以承担高负载压力且稳定，在硬件不差的情况下一般能支撑几万次的并发量，负载度比 LVS 相对小些。
Nginx 可以通过端口检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点，不过其中缺点就是不支持 url 来检测。比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，Nginx 会把上传切到另一台服务器重新处理，而 LVS 就直接断掉了，如果是上传一个很大的文件或者很重要的文件的话，用户可能会因此而不满。
Nginx 不仅仅是一款优秀的负载均衡器/反向代理软件，它同时也是功能强大的 Web 应用服务器。LNMP 也是近几年非常流行的 web 架构，在高流量的环境中稳定性也很好。
Nginx 现在作为 Web 反向加速缓存越来越成熟了，速度比传统的 Squid 服务器更快，可以考虑用其作为反向代理加速器。
Nginx 可作为中层反向代理使用，这一层面 Nginx 基本上无对手，唯一可以对比 Nginx 的就只有 lighttpd 了，不过 lighttpd 目前还没有做到 Nginx 完全的功能，配置也不那么清晰易读，社区资料也远远没 Nginx 活跃。
Nginx 也可作为静态网页和图片服务器，这方面的性能也无对手。还有 Nginx 社区非常活跃，第三方模块也很多。
 

Nginx 的缺点是：

Nginx 仅能支持 http、https 和 Email 协议，这样就在适用范围上面小些，这个是它的缺点。
对后端服务器的健康检查，只支持通过端口来检测，不支持通过 url 来检测。不支持 Session 的直接保持，但能通过 ip_hash 来解决。
 

LVS：使用 Linux 内核集群实现一个高性能、高可用的负载均衡服务器，它具有很好的可伸缩性（Scalability)、可靠性（Reliability)和可管理性（Manageability)。

 

LVS 的优点是：

抗负载能力强、是工作在网络 4 层之上仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的，对内存和 cpu 资源消耗比较低。
配置性比较低，这是一个缺点也是一个优点，因为没有可太多配置的东西，所以并不需要太多接触，大大减少了人为出错的几率。
工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案，如 LVS+Keepalived，不过我们在项目实施中用得最多的还是 LVS/DR+Keepalived。
无流量，LVS 只分发请求，而流量并不从它本身出去，这点保证了均衡器 IO 的性能不会受到大流量的影响。
应用范围比较广，因为 LVS 工作在 4 层，所以它几乎可以对所有应用做负载均衡，包括 http、数据库、在线聊天室等等。
 

LVS 的缺点是：

软件本身不支持正则表达式处理，不能做动静分离；而现在许多网站在这方面都有较强的需求，这个是 Nginx/HAProxy+Keepalived 的优势所在。
如果是网站应用比较庞大的话，LVS/DR+Keepalived 实施起来就比较复杂了，特别后面有 Windows Server 的机器的话，如果实施及配置还有维护过程就比较复杂了，相对而言，Nginx/HAProxy+Keepalived 就简单多了。
 

HAProxy 的特点是：

HAProxy 也是支持虚拟主机的。
HAProxy 的优点能够补充 Nginx 的一些缺点，比如支持 Session 的保持，Cookie 的引导；同时支持通过获取指定的 url 来检测后端服务器的状态。
HAProxy 跟 LVS 类似，本身就只是一款负载均衡软件；单纯从效率上来讲 HAProxy 会比 Nginx 有更出色的负载均衡速度，在并发处理上也是优于 Nginx 的。
HAProxy 支持 TCP 协议的负载均衡转发，可以对 MySQL 读进行负载均衡，对后端的 MySQL 节点进行检测和负载均衡，大家可以用 LVS+Keepalived 对 MySQL 主从做负载均衡。
HAProxy 负载均衡策略非常多，HAProxy 的负载均衡算法现在具体有如下 8 种：
① roundrobin，表示简单的轮询，这个不多说，这个是负载均衡基本都具备的；

② static-rr，表示根据权重，建议关注；

③ leastconn，表示最少连接者先处理，建议关注；

④ source，表示根据请求源 IP，这个跟 Nginx 的 IP_hash 机制类似，我们用其作为解决 session 问题的一种方法，建议关注；

⑤ ri，表示根据请求的 URI；

⑥ rl_param，表示根据请求的 URl 参数’balance url_param’ requires an URL parameter name；

⑦ hdr(name)，表示根据 HTTP 请求头来锁定每一次 HTTP 请求；

⑧ rdp-cookie(name)，表示根据据 cookie(name)来锁定并哈希每一次 TCP 请求。

 

Nginx 和 LVS 对比的总结：

 

Nginx 工作在网络的 7 层，所以它可以针对 http 应用本身来做分流策略，比如针对域名、目录结构等，相比之下 LVS 并不具备这样的功能，所以 Nginx 单凭这点可利用的场合就远多于 LVS 了；但 Nginx 有用的这些功能使其可调整度要高于 LVS，所以经常要去触碰触碰，触碰多了，人为出问题的几率也就会大。
Nginx 对网络稳定性的依赖较小，理论上只要 ping 得通，网页访问正常，Nginx 就能连得通，这是 Nginx 的一大优势！Nginx 同时还能区分内外网，如果是同时拥有内外网的节点，就相当于单机拥有了备份线路；LVS 就比较依赖于网络环境，目前来看服务器在同一网段内并且 LVS 使用 direct 方式分流，效果较能得到保证。另外注意，LVS 需要向托管商至少申请多一个 ip 来做 Visual IP，貌似是不能用本身的 IP 来做 VIP 的。要做好 LVS 管理员，确实得跟进学习很多有关网络通信方面的知识，就不再是一个 HTTP 那么简单了。
Nginx 安装和配置比较简单，测试起来也很方便，因为它基本能把错误用日志打印出来。LVS 的安装和配置、测试就要花比较长的时间了；LVS 对网络依赖比较大，很多时候不能配置成功都是因为网络问题而不是配置问题，出了问题要解决也相应的会麻烦得多。
Nginx 也同样能承受很高负载且稳定，但负载度和稳定度差 LVS 还有几个等级：Nginx 处理所有流量所以受限于机器 IO 和配置；本身的 bug 也还是难以避免的。
Nginx 可以检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点。目前 LVS 中 ldirectd 也能支持针对服务器内部的情况来监控，但 LVS 的原理使其不能重发请求。比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，Nginx 会把上传切到另一台服务器重新处理，而 LVS 就直接断掉了，如果是上传一个很大的文件或者很重要的文件的话，用户可能会因此而恼火。
Nginx 对请求的异步处理可以帮助节点服务器减轻负载，假如使用 apache 直接对外服务，那么出现很多的窄带链接时 apache 服务器将会占用大 量内存而不能释放，使用多一个 Nginx 做 apache 代理的话，这些窄带链接会被 Nginx 挡住，apache 上就不会堆积过多的请求，这样就减少了相当多的资源占用。这点使用 squid 也有相同的作用，即使 squid 本身配置为不缓存，对 apache 还是有很大帮助的。
Nginx 能支持 http、https 和 email（email 的功能比较少用），LVS 所支持的应用在这点上会比 Nginx 更多。在使用上，一般最前端所采取的策略应是 LVS，也就是 DNS 的指向应为 LVS 均衡器，LVS 的优点令它非常适合做这个任务。重要的 ip 地址，最好交由 LVS 托管，比如数据库的 ip、webservice 服务器的 ip 等等，这些 ip 地址随着时间推移，使用面会越来越大，如果更换 ip 则故障会接踵而至。所以将这些重要 ip 交给 LVS 托管是最为稳妥的，这样做的唯一缺点是需要的 VIP 数量会比较多。Nginx 可作为 LVS 节点机器使用，一是可以利用 Nginx 的功能，二是可以利用 Nginx 的性能。当然这一层面也可以直接使用 squid，squid 的功能方面就比 Nginx 弱不少了，性能上也有所逊色于 Nginx。Nginx 也可作为中层代理使用，这一层面 Nginx 基本上无对手，唯一可以撼动 Nginx 的就只有 lighttpd 了，不过 lighttpd 目前还没有能做到 Nginx 完全的功能，配置也不那么清晰易读。另外，中层代理的 IP 也是重要的，所以中层代理也拥有一个 VIP 和 LVS 是最完美的方案了。具体的应用还得具体分析，如果是比较小的网站（日 PV 小于 1000 万），用 Nginx 就完全可以了，如果机器也不少，可以用 DNS 轮询，LVS 所耗费的机器还是比较多的；大型网站或者重要的服务，机器不发愁的时候，要多多考虑利用 LVS。
44.做秒杀时锁表考虑到没有？

答:考虑到了，当时我们做秒杀时考虑了好几种方案，其中有一种就是使用事务加上排他锁来实现。

架构类的东西接触过吗？
   有接触过，曾经自己在自己的服务器上配置过。我以前做过以下几个架构方面的配置和测试;
   1、数据库的读写分离、主从复制及集群。
   2、Nginx 负载均衡
   3、redis 集群及主从
45.封装过一个简单的框架

答;封装过一个简单的 MVC 框架,主要分为 3 层，控制器层和模型层视图层，以及路由的分配和入口文件，模板引擎，单例模式、工厂模式，第三方类库的引入等。
46.谈谈对 MVC 的认识

答:核心思想是：视图和用户交互通过事件导致控制器改变 控制器改变导致模型改变 或者控制器同时改变两者 模型改变 导致视图改变 或者视图改变 潜在的从模型里面获得参数 来改变自己。他的好处是可以将界面和业务逻辑分离。

Model（模型），是程序的主体部分，主要包含业务数据和业务逻辑。在模型层，还会涉及到用户发布的服务，在服务中会根据不同的业务需求，更新业务模型中的数据。
View(视图），是程序呈现给用户的部分，是用户和程序交互的接口，用户会根据具体的业务需求，在 View 视图层输入自己特定的业务数据，并通过界面的事件交互，将对应的输入参数提交给后台控制器进行处理。
Contorller（控制器），Contorller 是用来处理用户 输入数据，已经更新业务模型的部分。控制器中接收了用户与界面交互时传递过来的数据，并根据数据业务逻辑来执行服务的调用和更新业务模型的数据和状态。
47.session 与 cookie 的区别

答:1、cookie 数据存放在第三方应用的浏览器上，session 数据放在服务器上。
   2、cookie 不是很安全，别人可以分析存放在本地的 COOKIE，进行 COOKIE 欺骗

考虑到安全应当使用 session。
3、session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能

考虑到减轻服务器性能方面，应当使用 COOKIE。
4、单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。
5、所以个人建议：
    将登陆信息等重要信息存放为 SESSION
    其他信息如果需要保留，可以放在 COOKIE
48.echo(),print(),print_r()的区别

答:echo 可以一次输出多个值，多个值之间用逗号分隔。echo 是语言结构(language construct)，而并不是真正的函数，因此不能作为表达式的一部分使用。echo 是 php 的内部指令，不是函数，无返回值。

print()：函数 print()打印一个值（它的参数），如果字符串成功显示则返回 true，否则返回 false。只能打印出简单类型变量的值(如 int,string)，有返回值

printf()：源于 C 语言中的 printf()。该函数输出格式化的字符串。

print_r()和 var_dump()
print_r()可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以 Array 开头。但 print_r()输出布尔值和 NULL 的结果没有意义，因为都是打印"\n"。因此用 var_dump()函数更适合调试。print_r 是函数，可以打印出比较复杂的变量(如数组，对象)，有返回值
var_dump()判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型。此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。
49.说一下单引号双引号？

答:①单引号内部的变量不会执行， 双引号会执行
②单引号解析速度比双引号快。
③单引号只能解析部分特殊字符，双引号可以解析所有特殊字符。
50.索引的优缺点

答:1、优点：

 a）可以保证数据库表中每一行的数据的唯一性
 b）可以大大加快数据的索引速度
 c）加速表与表之间的连接，物别是在实现数据的参考完事性方面特别有意义
 d）在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间
 f）通过使用索引，可以在时间查询的过程中，使用优化隐藏器，提高系统的性能

2、 缺点：
 a) 创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加
 b) 索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间，如果需要建立聚簇索引，那么需要占用的空间会更大
 c) 以表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了整数的维护速度
 d) 建立索引的原则
 e) 在经常需要搜索的列上，可以加快搜索的速度
 f) 在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构
 g) 在经常用在连接的列上，这些列主要是一外键，可以加快连接的速度
 h) 在经经常需要根据范围进行搜索的列上创建索引，国为索引已经排序，其指定的范围是连续的
 i) 在经常需要排序的列上，国为索引已经排序，这样井底可以利用索引的排序，加快排序井底时间
 j) 在经常使用在 where 子句中的列上，加快条件的判断速度
51.get 和 post 的区别

答:1. get 是从服务器上获取数据，post 是向服务器传送数据。
2. get 是把参数数据队列加到提交表单的 ACTION 属性所指的 URL 中，值和表单内各个字段一一对应，在 URL 中可以看到。post 是通过 HTTP post 机制，将表单内各个字段与其内容放置在 HTML HEADER 内一起传送到 ACTION 属性所指的 URL 地址。用户看不到这个过程。
3. get 传送的数据量较小，不能大于 2KB。post 传送的数据量较大，一般被默认为不受限制。4.. get 安全性非常低，post 安全性较高。但是执行效率却比 Post 方法好。
52.如何修改 session 的生存时间

答:一：在 php.ini 中设置 session.gc_maxlifetime = 1440 //默认时间
   二：代码实现
    $lifeTime = 24 * 3600;  // 保存一天 
    session_set_cookie_params($lifeTime); 
    session_start();
53.Linux 基本命令，目录结构

答:arch 显示机器的处理器架构(1) 
uname -m 显示机器的处理器架构(2) 
uname -r 显示正在使用的内核版本 
dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) 
hdparm -i /dev/hda 罗列一个磁盘的架构特性 
hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 
cat /porc/cpuinfo 显示 CPU info 的信息 
cat /porc/interrupts 显示中断 
cat /porc/meminfo 校验内存使用 
cat /porc/swaps 显示哪些 swap 被使用 
cat /porc/verion 显示内核的版本 
cat /porc/net/dev 显示网络适配器及统计 
cat /porc/mounts 显示已加载的文件系统 

date 显示系统日期 
cal 2007 显示 2007 年的日历表 
date 041217002007.00 设置日期和时间 -月日时分年.秒 
clock -w 将时间修改保存到 BIOS 

文件搜索 
find / -name file1 从 '/'开始进入根文件系统搜索文件和目录 

locate \*.ps 寻找以 '.ps'结尾的文件 -先运行'updatedb'命令 
whereis halt 显示一个二进制文件、源码或 man 的位置 
which halt 显示一个二进制文件或可执行文件的完整路径 

挂载一个文件系统 
mount /dev/hda2 /mnt/hda2 挂载一个叫做 hda2 的盘- 确定目录'/ mnt/hda2' 已经存在 
umount /dev/hda2 卸载一个叫做 hda2 的盘- 先从挂载点'/ mnt/hda2' 退出 

追加命令

1,linux 里把文件/etc/aaa 中的内容追加到/usr/bbb 中的内容的后面
  sudo cat /etc/aaa >>/usr/bbb
2,更改/etc/index.html 的文件所有者为 apache,文件群组为 apache
  sudo chmod apache:apache  /etc/index.html
3,更改/etc/index.html 的所有者权限为读取、写入、执行。群组权限为读取。其他权限为读取
  sudo chmod 744 /etc/index.html
4，删除/etc 下名为 hello 的文件
  sudo rm /etc/index.html

当然，如果你是以 orot 用户执行以上操作，可以去掉前边的 sudo！

df -hl 查看磁盘剩余空间

df -h 查看每个根路径的分区大小

du -sh [目录名] 返回该目录的大小

du -sm [文件夹] 返回该文件夹总 M 数

关机 (系统的关机、重启以及登出) 
shutdown -h now 关闭系统(1) 
init 0 关闭系统(2) 
telinit 0 关闭系统(3) 
shutdown -h hour:minutes & 按预定时间关闭系统 
shutdown -c 取消按预定时间关闭系统 
shutdown -r now 重启(1) 
reboot 重启(2) 
logout 注销

文件和目录 
pwd 显示工作路径 
ls 查看目录中的文件 
ls -F 查看目录中的文件 
ls -l 显示文件和目录的详细资料 
ls -a 显示隐藏文件 
ls *[0-9]* 显示包含数字的文件名和目录名 
tree 显示文件和目录由根目录开始的树形结构(1) 
lstree 显示文件和目录由根目录开始的树形结构(2) 
mkdir dir1 创建一个叫做 'dir1'的目录' 

磁盘空间 
df -h 显示已经挂载的分区列表 
ls -lSr |more 以尺寸大小排列文件和目录 
du -sh dir1 估算目录 'dir1'已经使用的磁盘空间' 

下载、解压

1)对于.tar 结尾的文件 
　　tar -xf all.tar 

2)对于.gz 结尾的文件 
　　gzip -d all.gz 
　　gunzip all.gz 

# zip all.zip *.jpg 
　　这条命令是将所有.jpg 的文件压缩成一个 zip 包 
# unzip all.zip 
　　这条命令是将 all.zip 中的所有文件解压出来

下载命令

wget + 空格 +要下载文件的 url 路径

=====================================

Shell 脚本：

必须以  #!/bin/sh  开头

简单例子：判断这个目录下有没有文件（File）

#!/bin/bash
Num=`ls -al /opt |grep "^-"|wc -l `
if [ $Num != 0 ]
 then echo "/opt has $Num files"
else
 echo "/opt has none file"
fi

ls -al /opt |grep "^-"|wc -l  这个命令能够统计文件个数 为 0 就是没有文件 非零就是有文件
54..memcache 缓存什么数据

答:一、经常被读取并且实时性要求不强可以等到自动过期的数据。例如网站首页最新文章列表、某某排行等数据。

二、经常被读取并且实时性要求强的数据。比如用户的好友列表，用户文章列表，用户阅读记录等。

三、统计类缓存，比如文章浏览数、网站 PV 等。

四、活跃用户的基本信息或者某篇热门文章。

五、session 数据
55.魔术方法、魔术常量

答:1。__construct()
实例化对象时被调用，当 __construct 和以类名为函数名的函数同时存在时，__construct 将被调用，另一个不被调用。

2。__destruct()
当删除一个对象或对象操作终止时被调用。

3。__call()
对象调用某个方法，若方法存在，则直接调用；若不存在，则会去调用 __call 函数。

4。__get()
读取一个对象的属性时，若属性存在，则直接返回属性值；若不存在，则会调用 __get 函数。

5。__set()
设置一个对象的属性时，若属性存在，则直接赋值；若不存在，则会调用 __set 函数。

6。__toString()
打印一个对象的时被调用。如 echo obj;或 printobj;

7。__clone()
克隆对象时被调用。如：t=newTest();t1=clone $t;

8。__sleep()
serialize 之前被调用。若对象比较大，想删减一点东东再序列化，可考虑一下此函数。

9。__wakeup()
unserialize 时被调用，做些对象的初始化工作。

10。__isset()
检测一个对象的属性是否存在时被调用。如：isset($c->name)。

11。__unset()
unset 一个对象的属性时被调用。如：unset($c->name)。

12。__set_state()
调用 var_export 时，被调用。用 __set_state 的返回值做为 var_export 的返回值。

13。__autoload()
实例化一个对象时，如果对应的类不存在，则该方法被调用。

魔术常量：

1。__LINE__
返回文件中的当前行号。

2。__FILE__
返回文件的完整路径和文件名。如果用在包含文件中，则返回包含文件名。自 PHP 4.0.2 起，__FILE__ 总是包含一个绝对路径，而在此之前的版本有时会包含一个相对路径。

3。__FUNCTION__
返回函数名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该函数被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。

4。__CLasS__
返回类的名称（PHP 4.3.0 新加）。自 PHP 5 起本常量返回该类被定义时的名字（区分大小写）。在 PHP 4 中该值总是小写字母的。

5。__METHOD__
返回类的方法名（PHP 5.0.0 新加）。返回该方法被定义时的名字（区分大小写）。

6.__set()当程序试图写入一个不存在或者不可见的成员变量时，__set()方法包含两个参数，分别表示变量名称和变量值，两个参数都不可省略

7.__get()当程序试图调用一个未定义或不可见的成员变量时，__get()方法有一个参数，表示要调用的变量名

__sleep() 常用于提交未提交的数据，或类似的清理操作如果有一些很大的对象，但不需要全部保存，这个功能就很好用。

__construct()  在类实例化对象的同时执行该函数

__distruct() 在类实例化的对象销毁时执行

__call()对象调用某个方法，若方法存在，则直接调用；若不存在，则会去调用 __call 函数。

__clone()克隆对象时被调用。如：$t=new Test();$t1=clone $t;

__toString()打印一个对象的时被调用。如 echo $obj;或 print $obj;

__isset()检测一个对象的属性是否存在时被调用。如：isset($c->name)。

__unset()unset 一个对象的属性时被调用。如：unset($c->name)。

__autoload()实例化一个对象时，如果对应的类不存在，则该方法被调用。
56.接口和抽象类的区别是什么？

答:抽象类是一种不能被实例化的类，只能作为其他类的父类来使用。抽象类是通过关键字 abstract 来声明的。
抽象类与普通类相似，都包含成员变量和成员方法，两者的区别在于，抽象类中至少要包含一个抽象方法，抽象方法没有方法体，该方法天生就是要被子类重写的。
抽象方法的格式为：abstract function abstractMethod();

接口是通过 interface 关键字来声明的，接口中的成员常量和方法都是 public 的，方法可以不写关键字 public，接口中的方法也是没有方法体。接口中的方法也天生就是要被子类实现的。
抽象类和接口实现的功能十分相似，最大的不同是接口能实现多继承。在应用中选择抽象类还是接口要看具体实现。
子类继承抽象类使用 extends，子类实现接口使用 implements。
57.什么是队列？排它锁，Myisam 死锁如何解决？

答:在默认情况下 MYisam 是表级锁，所以同时操作单张表的多个动作只能以队列的方式进行；

排它锁又名写锁，在 SQL 执行过程中为排除其它请求而写锁，在执行完毕后会自动释放；

死锁解决：先找到死锁的线程号，然后杀掉线程 ID
58.bootstrap 框架有哪些优点?

答:bootstrap 是一款 web 开发框架,它由 CSS,JavaScript,Html,三部分构成,它简洁灵活,使得 web 开发更加的快捷
优点:
    ①节省时间: 使用 bootstrap 框架,可以大大的节省项目开发时间,它包含了很多现成的代码,如果需要使用,只需要找到合适的代码,插入合适的位置即可,此外,CSS 是使用 LESS 编写,很多样式和设计都已经设计完成了
    ②定制化: bootstrap 可以根据自己的项目,留取框架中自己需要的部分
    ③设计合理: 

   1. 栅格系统: bootstrap 定义 12 格栅系统,在页面已经完成时,你可以根据合适的网格,以自己的需求改变行数和布局大小,样式已经开发完成了,只需要把代码放入合适的 HTML 代码位置即可
   2. LESS: LESS 是基于 CSS 之上的高级语言,其目的是使得 CSS 开发更加灵活,更加强大
   3. JavaScript:bootstrap 提供 JavaScript 库,该库超越了基本的架构和样式,开发者可以轻松的操作窗口警告框,工具提示框等,可避免了我们费神费力的写脚本
   4. 一致性: bootstrap 可以保证界面在不同平台的统一性,无论实在 IE,Chrome 等
   5. 持续更新: bootstrap 在不断的改进,更具规律性和持续性
   6. 响应式: 无论是在 PC 端还是移动端,都可以保持界面的一致性
   7. 文档多: bootstrap 的非常多
